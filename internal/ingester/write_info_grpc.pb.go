// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: influxdata/iox/ingester/v1/write_info.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WriteInfoServiceClient is the client API for WriteInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WriteInfoServiceClient interface {
	// Get information about a particular write
	GetWriteInfo(ctx context.Context, in *GetWriteInfoRequest, opts ...grpc.CallOption) (*GetWriteInfoResponse, error)
}

type writeInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWriteInfoServiceClient(cc grpc.ClientConnInterface) WriteInfoServiceClient {
	return &writeInfoServiceClient{cc}
}

func (c *writeInfoServiceClient) GetWriteInfo(ctx context.Context, in *GetWriteInfoRequest, opts ...grpc.CallOption) (*GetWriteInfoResponse, error) {
	out := new(GetWriteInfoResponse)
	err := c.cc.Invoke(ctx, "/influxdata.iox.ingester.v1.WriteInfoService/GetWriteInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WriteInfoServiceServer is the server API for WriteInfoService service.
// All implementations must embed UnimplementedWriteInfoServiceServer
// for forward compatibility
type WriteInfoServiceServer interface {
	// Get information about a particular write
	GetWriteInfo(context.Context, *GetWriteInfoRequest) (*GetWriteInfoResponse, error)
	mustEmbedUnimplementedWriteInfoServiceServer()
}

// UnimplementedWriteInfoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWriteInfoServiceServer struct {
}

func (UnimplementedWriteInfoServiceServer) GetWriteInfo(context.Context, *GetWriteInfoRequest) (*GetWriteInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriteInfo not implemented")
}
func (UnimplementedWriteInfoServiceServer) mustEmbedUnimplementedWriteInfoServiceServer() {}

// UnsafeWriteInfoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WriteInfoServiceServer will
// result in compilation errors.
type UnsafeWriteInfoServiceServer interface {
	mustEmbedUnimplementedWriteInfoServiceServer()
}

func RegisterWriteInfoServiceServer(s grpc.ServiceRegistrar, srv WriteInfoServiceServer) {
	s.RegisterService(&WriteInfoService_ServiceDesc, srv)
}

func _WriteInfoService_GetWriteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriteInfoServiceServer).GetWriteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/influxdata.iox.ingester.v1.WriteInfoService/GetWriteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriteInfoServiceServer).GetWriteInfo(ctx, req.(*GetWriteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WriteInfoService_ServiceDesc is the grpc.ServiceDesc for WriteInfoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WriteInfoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "influxdata.iox.ingester.v1.WriteInfoService",
	HandlerType: (*WriteInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWriteInfo",
			Handler:    _WriteInfoService_GetWriteInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "influxdata/iox/ingester/v1/write_info.proto",
}
