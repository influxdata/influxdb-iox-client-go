// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.21.5
// source: influxdata/iox/ingester/v1/query.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request to the ingester service for data that is not yet
// persisted. This is how the querier and ingester interact.
//
// This type of message is Serialized as the Ticket value for the
// Arrow Flight doGet request.
type IngesterQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table to search
	Table string `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	// Columns the query service is interested in
	Columns []string `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// Predicate for filtering
	Predicate *Predicate `protobuf:"bytes,5,opt,name=predicate,proto3,oneof" json:"predicate,omitempty"`
	// Namespace to search
	Namespace string `protobuf:"bytes,7,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *IngesterQueryRequest) Reset() {
	*x = IngesterQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_ingester_v1_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngesterQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngesterQueryRequest) ProtoMessage() {}

func (x *IngesterQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_ingester_v1_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngesterQueryRequest.ProtoReflect.Descriptor instead.
func (*IngesterQueryRequest) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_ingester_v1_query_proto_rawDescGZIP(), []int{0}
}

func (x *IngesterQueryRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *IngesterQueryRequest) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *IngesterQueryRequest) GetPredicate() *Predicate {
	if x != nil {
		return x.Predicate
	}
	return nil
}

func (x *IngesterQueryRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// Metadata that the ingester provides to the query service along with the results. Serialized
// in every FlightData's app_metadata .
type IngesterQueryResponseMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Partition id for this batch.
	//
	// This field is currently NOT used by the ingester but will be soon.
	PartitionId int64 `protobuf:"varint,7,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	// Optional partition status.
	//
	// If this is given, then no schema and no batch will be part of this FlightData object.
	//
	// This field is currently NOT used by the ingester but will be soon.
	Status *PartitionStatus `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *IngesterQueryResponseMetadata) Reset() {
	*x = IngesterQueryResponseMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_ingester_v1_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IngesterQueryResponseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IngesterQueryResponseMetadata) ProtoMessage() {}

func (x *IngesterQueryResponseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_ingester_v1_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IngesterQueryResponseMetadata.ProtoReflect.Descriptor instead.
func (*IngesterQueryResponseMetadata) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_ingester_v1_query_proto_rawDescGZIP(), []int{1}
}

func (x *IngesterQueryResponseMetadata) GetPartitionId() int64 {
	if x != nil {
		return x.PartitionId
	}
	return 0
}

func (x *IngesterQueryResponseMetadata) GetStatus() *PartitionStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Status of a partition that has unpersisted data.
//
// Note that this structure is specific to a partition (which itself is bound to a table and shard)!
type PartitionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max sequence number persisted
	ParquetMaxSequenceNumber *int64 `protobuf:"varint,1,opt,name=parquet_max_sequence_number,json=parquetMaxSequenceNumber,proto3,oneof" json:"parquet_max_sequence_number,omitempty"`
	// Max sequence number for a tombstone associated
	TombstoneMaxSequenceNumber *int64 `protobuf:"varint,2,opt,name=tombstone_max_sequence_number,json=tombstoneMaxSequenceNumber,proto3,oneof" json:"tombstone_max_sequence_number,omitempty"`
}

func (x *PartitionStatus) Reset() {
	*x = PartitionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_ingester_v1_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionStatus) ProtoMessage() {}

func (x *PartitionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_ingester_v1_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionStatus.ProtoReflect.Descriptor instead.
func (*PartitionStatus) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_ingester_v1_query_proto_rawDescGZIP(), []int{2}
}

func (x *PartitionStatus) GetParquetMaxSequenceNumber() int64 {
	if x != nil && x.ParquetMaxSequenceNumber != nil {
		return *x.ParquetMaxSequenceNumber
	}
	return 0
}

func (x *PartitionStatus) GetTombstoneMaxSequenceNumber() int64 {
	if x != nil && x.TombstoneMaxSequenceNumber != nil {
		return *x.TombstoneMaxSequenceNumber
	}
	return 0
}

// Serialization of `predicate::predicate::Predicate` that contains DataFusion `Expr`s
type Predicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional field restriction. If any are present, restricts the results to only tables which
	// have *at least one* of the fields in field_columns.
	FieldColumns []string `protobuf:"bytes,1,rep,name=field_columns,json=fieldColumns,proto3" json:"field_columns,omitempty"`
	// Optional timestamp range: only rows within this range are included in results. Other rows are
	// excluded.
	Range *TimestampRange `protobuf:"bytes,3,opt,name=range,proto3,oneof" json:"range,omitempty"`
	// Optional arbitrary predicates, represented as list of DataFusion expressions applied a logical
	// conjunction (aka they are 'AND'ed together). Only rows that evaluate to TRUE for all these
	// expressions should be returned. Other rows are excluded from the results.
	//
	// Encoded using DataFusion's Expr serialization code
	Exprs [][]byte `protobuf:"bytes,4,rep,name=exprs,proto3" json:"exprs,omitempty"`
	// Optional arbitrary predicates on the special `_value` column. These expressions are applied to
	// `field_columns` projections in the form of `CASE` statement conditions.
	ValueExpr []*ValueExpr `protobuf:"bytes,5,rep,name=value_expr,json=valueExpr,proto3" json:"value_expr,omitempty"`
}

func (x *Predicate) Reset() {
	*x = Predicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_ingester_v1_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Predicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Predicate) ProtoMessage() {}

func (x *Predicate) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_ingester_v1_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Predicate.ProtoReflect.Descriptor instead.
func (*Predicate) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_ingester_v1_query_proto_rawDescGZIP(), []int{3}
}

func (x *Predicate) GetFieldColumns() []string {
	if x != nil {
		return x.FieldColumns
	}
	return nil
}

func (x *Predicate) GetRange() *TimestampRange {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *Predicate) GetExprs() [][]byte {
	if x != nil {
		return x.Exprs
	}
	return nil
}

func (x *Predicate) GetValueExpr() []*ValueExpr {
	if x != nil {
		return x.ValueExpr
	}
	return nil
}

// Specifies a continuous range of nanosecond timestamps.
type TimestampRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start defines the inclusive lower bound.
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// End defines the exclusive upper bound.
	End int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *TimestampRange) Reset() {
	*x = TimestampRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_ingester_v1_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimestampRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampRange) ProtoMessage() {}

func (x *TimestampRange) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_ingester_v1_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampRange.ProtoReflect.Descriptor instead.
func (*TimestampRange) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_ingester_v1_query_proto_rawDescGZIP(), []int{4}
}

func (x *TimestampRange) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TimestampRange) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

// A wrapper around a DataFusion expression against `_value` columns
type ValueExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Encoded using DataFusion's Expr serialization code
	Expr []byte `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *ValueExpr) Reset() {
	*x = ValueExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_ingester_v1_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueExpr) ProtoMessage() {}

func (x *ValueExpr) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_ingester_v1_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueExpr.ProtoReflect.Descriptor instead.
func (*ValueExpr) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_ingester_v1_query_proto_rawDescGZIP(), []int{5}
}

func (x *ValueExpr) GetExpr() []byte {
	if x != nil {
		return x.Expr
	}
	return nil
}

var File_influxdata_iox_ingester_v1_query_proto protoreflect.FileDescriptor

var file_influxdata_iox_ingester_v1_query_proto_rawDesc = []byte{
	0x0a, 0x26, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6f, 0x78,
	0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x22, 0x94, 0x02, 0x0a, 0x14, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x48, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f,
	0x78, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a,
	0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x1c, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x61, 0x6e, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x0c, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xaa, 0x02, 0x0a, 0x1d,
	0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a,
	0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f,
	0x78, 0x2e, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52,
	0x1b, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x1d, 0x74, 0x6f,
	0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x16, 0x75, 0x6e, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x13, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x1b,
	0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x18, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x4d, 0x61, 0x78, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x46, 0x0a, 0x1d, 0x74, 0x6f, 0x6d, 0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x1a, 0x74, 0x6f, 0x6d, 0x62, 0x73,
	0x74, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x70, 0x61, 0x72,
	0x71, 0x75, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x20, 0x0a, 0x1e, 0x5f, 0x74, 0x6f, 0x6d,
	0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf2, 0x01, 0x0a, 0x09, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x45, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x69, 0x6e,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x70, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x70, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e,
	0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x22,
	0x38, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x1f, 0x0a, 0x09, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x69, 0x6f, 0x78, 0x2f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_influxdata_iox_ingester_v1_query_proto_rawDescOnce sync.Once
	file_influxdata_iox_ingester_v1_query_proto_rawDescData = file_influxdata_iox_ingester_v1_query_proto_rawDesc
)

func file_influxdata_iox_ingester_v1_query_proto_rawDescGZIP() []byte {
	file_influxdata_iox_ingester_v1_query_proto_rawDescOnce.Do(func() {
		file_influxdata_iox_ingester_v1_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_influxdata_iox_ingester_v1_query_proto_rawDescData)
	})
	return file_influxdata_iox_ingester_v1_query_proto_rawDescData
}

var file_influxdata_iox_ingester_v1_query_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_influxdata_iox_ingester_v1_query_proto_goTypes = []interface{}{
	(*IngesterQueryRequest)(nil),          // 0: influxdata.iox.ingester.v1.IngesterQueryRequest
	(*IngesterQueryResponseMetadata)(nil), // 1: influxdata.iox.ingester.v1.IngesterQueryResponseMetadata
	(*PartitionStatus)(nil),               // 2: influxdata.iox.ingester.v1.PartitionStatus
	(*Predicate)(nil),                     // 3: influxdata.iox.ingester.v1.Predicate
	(*TimestampRange)(nil),                // 4: influxdata.iox.ingester.v1.TimestampRange
	(*ValueExpr)(nil),                     // 5: influxdata.iox.ingester.v1.ValueExpr
}
var file_influxdata_iox_ingester_v1_query_proto_depIdxs = []int32{
	3, // 0: influxdata.iox.ingester.v1.IngesterQueryRequest.predicate:type_name -> influxdata.iox.ingester.v1.Predicate
	2, // 1: influxdata.iox.ingester.v1.IngesterQueryResponseMetadata.status:type_name -> influxdata.iox.ingester.v1.PartitionStatus
	4, // 2: influxdata.iox.ingester.v1.Predicate.range:type_name -> influxdata.iox.ingester.v1.TimestampRange
	5, // 3: influxdata.iox.ingester.v1.Predicate.value_expr:type_name -> influxdata.iox.ingester.v1.ValueExpr
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_influxdata_iox_ingester_v1_query_proto_init() }
func file_influxdata_iox_ingester_v1_query_proto_init() {
	if File_influxdata_iox_ingester_v1_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_influxdata_iox_ingester_v1_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngesterQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_ingester_v1_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IngesterQueryResponseMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_ingester_v1_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_ingester_v1_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Predicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_ingester_v1_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimestampRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_ingester_v1_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_influxdata_iox_ingester_v1_query_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_influxdata_iox_ingester_v1_query_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_influxdata_iox_ingester_v1_query_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_influxdata_iox_ingester_v1_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_influxdata_iox_ingester_v1_query_proto_goTypes,
		DependencyIndexes: file_influxdata_iox_ingester_v1_query_proto_depIdxs,
		MessageInfos:      file_influxdata_iox_ingester_v1_query_proto_msgTypes,
	}.Build()
	File_influxdata_iox_ingester_v1_query_proto = out.File
	file_influxdata_iox_ingester_v1_query_proto_rawDesc = nil
	file_influxdata_iox_ingester_v1_query_proto_goTypes = nil
	file_influxdata_iox_ingester_v1_query_proto_depIdxs = nil
}
