// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: influxdata/iox/management/v1/jobs.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperationMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How many nanoseconds of CPU time have been spent on this job so far?
	CpuNanos uint64 `protobuf:"varint,1,opt,name=cpu_nanos,json=cpuNanos,proto3" json:"cpu_nanos,omitempty"`
	// How many nanoseconds has it been since the job was submitted
	WallNanos uint64 `protobuf:"varint,2,opt,name=wall_nanos,json=wallNanos,proto3" json:"wall_nanos,omitempty"`
	// The total number of created tasks
	TotalCount uint64 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// The number of pending tasks
	PendingCount uint64 `protobuf:"varint,4,opt,name=pending_count,json=pendingCount,proto3" json:"pending_count,omitempty"`
	// The number of tasks that completed successfully
	SuccessCount uint64 `protobuf:"varint,13,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"`
	// The number of tasks that returned an error
	ErrorCount uint64 `protobuf:"varint,14,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	// The number of tasks that were cancelled
	CancelledCount uint64 `protobuf:"varint,15,opt,name=cancelled_count,json=cancelledCount,proto3" json:"cancelled_count,omitempty"`
	// The number of tasks that did not run to completion (e.g. panic)
	DroppedCount uint64 `protobuf:"varint,16,opt,name=dropped_count,json=droppedCount,proto3" json:"dropped_count,omitempty"`
	// What kind of job is it?
	//
	// Types that are assignable to Job:
	//	*OperationMetadata_Dummy
	//	*OperationMetadata_CloseChunk
	//	*OperationMetadata_WriteChunk
	//	*OperationMetadata_WipePreservedCatalog
	//	*OperationMetadata_CompactChunks
	//	*OperationMetadata_PersistChunks
	//	*OperationMetadata_DropChunk
	//	*OperationMetadata_DropPartition
	Job isOperationMetadata_Job `protobuf_oneof:"job"`
}

func (x *OperationMetadata) Reset() {
	*x = OperationMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationMetadata) ProtoMessage() {}

func (x *OperationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationMetadata.ProtoReflect.Descriptor instead.
func (*OperationMetadata) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_jobs_proto_rawDescGZIP(), []int{0}
}

func (x *OperationMetadata) GetCpuNanos() uint64 {
	if x != nil {
		return x.CpuNanos
	}
	return 0
}

func (x *OperationMetadata) GetWallNanos() uint64 {
	if x != nil {
		return x.WallNanos
	}
	return 0
}

func (x *OperationMetadata) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *OperationMetadata) GetPendingCount() uint64 {
	if x != nil {
		return x.PendingCount
	}
	return 0
}

func (x *OperationMetadata) GetSuccessCount() uint64 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *OperationMetadata) GetErrorCount() uint64 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *OperationMetadata) GetCancelledCount() uint64 {
	if x != nil {
		return x.CancelledCount
	}
	return 0
}

func (x *OperationMetadata) GetDroppedCount() uint64 {
	if x != nil {
		return x.DroppedCount
	}
	return 0
}

func (m *OperationMetadata) GetJob() isOperationMetadata_Job {
	if m != nil {
		return m.Job
	}
	return nil
}

func (x *OperationMetadata) GetDummy() *Dummy {
	if x, ok := x.GetJob().(*OperationMetadata_Dummy); ok {
		return x.Dummy
	}
	return nil
}

func (x *OperationMetadata) GetCloseChunk() *CloseChunk {
	if x, ok := x.GetJob().(*OperationMetadata_CloseChunk); ok {
		return x.CloseChunk
	}
	return nil
}

func (x *OperationMetadata) GetWriteChunk() *WriteChunk {
	if x, ok := x.GetJob().(*OperationMetadata_WriteChunk); ok {
		return x.WriteChunk
	}
	return nil
}

func (x *OperationMetadata) GetWipePreservedCatalog() *WipePreservedCatalog {
	if x, ok := x.GetJob().(*OperationMetadata_WipePreservedCatalog); ok {
		return x.WipePreservedCatalog
	}
	return nil
}

func (x *OperationMetadata) GetCompactChunks() *CompactChunks {
	if x, ok := x.GetJob().(*OperationMetadata_CompactChunks); ok {
		return x.CompactChunks
	}
	return nil
}

func (x *OperationMetadata) GetPersistChunks() *PersistChunks {
	if x, ok := x.GetJob().(*OperationMetadata_PersistChunks); ok {
		return x.PersistChunks
	}
	return nil
}

func (x *OperationMetadata) GetDropChunk() *DropChunk {
	if x, ok := x.GetJob().(*OperationMetadata_DropChunk); ok {
		return x.DropChunk
	}
	return nil
}

func (x *OperationMetadata) GetDropPartition() *DropPartition {
	if x, ok := x.GetJob().(*OperationMetadata_DropPartition); ok {
		return x.DropPartition
	}
	return nil
}

type isOperationMetadata_Job interface {
	isOperationMetadata_Job()
}

type OperationMetadata_Dummy struct {
	Dummy *Dummy `protobuf:"bytes,5,opt,name=dummy,proto3,oneof"`
}

type OperationMetadata_CloseChunk struct {
	// historical artifact
	//PersistSegment persist_segment = 6;
	CloseChunk *CloseChunk `protobuf:"bytes,7,opt,name=close_chunk,json=closeChunk,proto3,oneof"`
}

type OperationMetadata_WriteChunk struct {
	WriteChunk *WriteChunk `protobuf:"bytes,8,opt,name=write_chunk,json=writeChunk,proto3,oneof"`
}

type OperationMetadata_WipePreservedCatalog struct {
	WipePreservedCatalog *WipePreservedCatalog `protobuf:"bytes,9,opt,name=wipe_preserved_catalog,json=wipePreservedCatalog,proto3,oneof"`
}

type OperationMetadata_CompactChunks struct {
	CompactChunks *CompactChunks `protobuf:"bytes,10,opt,name=compact_chunks,json=compactChunks,proto3,oneof"`
}

type OperationMetadata_PersistChunks struct {
	PersistChunks *PersistChunks `protobuf:"bytes,11,opt,name=persist_chunks,json=persistChunks,proto3,oneof"`
}

type OperationMetadata_DropChunk struct {
	DropChunk *DropChunk `protobuf:"bytes,12,opt,name=drop_chunk,json=dropChunk,proto3,oneof"`
}

type OperationMetadata_DropPartition struct {
	DropPartition *DropPartition `protobuf:"bytes,17,opt,name=drop_partition,json=dropPartition,proto3,oneof"`
}

func (*OperationMetadata_Dummy) isOperationMetadata_Job() {}

func (*OperationMetadata_CloseChunk) isOperationMetadata_Job() {}

func (*OperationMetadata_WriteChunk) isOperationMetadata_Job() {}

func (*OperationMetadata_WipePreservedCatalog) isOperationMetadata_Job() {}

func (*OperationMetadata_CompactChunks) isOperationMetadata_Job() {}

func (*OperationMetadata_PersistChunks) isOperationMetadata_Job() {}

func (*OperationMetadata_DropChunk) isOperationMetadata_Job() {}

func (*OperationMetadata_DropPartition) isOperationMetadata_Job() {}

// A job that simply sleeps for a specified time and then returns success
type Dummy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How long the job should sleep for before returning
	Nanos []uint64 `protobuf:"varint,1,rep,packed,name=nanos,proto3" json:"nanos,omitempty"`
	// Name of the database, if any
	DbName string `protobuf:"bytes,2,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
}

func (x *Dummy) Reset() {
	*x = Dummy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dummy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dummy) ProtoMessage() {}

func (x *Dummy) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dummy.ProtoReflect.Descriptor instead.
func (*Dummy) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_jobs_proto_rawDescGZIP(), []int{1}
}

func (x *Dummy) GetNanos() []uint64 {
	if x != nil {
		return x.Nanos
	}
	return nil
}

func (x *Dummy) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

// Move a chunk from mutable buffer to read buffer
type CloseChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the database
	DbName string `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	// partition key
	PartitionKey string `protobuf:"bytes,2,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	// table name
	TableName string `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// chunk_id
	ChunkId uint32 `protobuf:"varint,3,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
}

func (x *CloseChunk) Reset() {
	*x = CloseChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloseChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseChunk) ProtoMessage() {}

func (x *CloseChunk) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseChunk.ProtoReflect.Descriptor instead.
func (*CloseChunk) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_jobs_proto_rawDescGZIP(), []int{2}
}

func (x *CloseChunk) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *CloseChunk) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *CloseChunk) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *CloseChunk) GetChunkId() uint32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

// Write a chunk from read buffer to object store
type WriteChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the database
	DbName string `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	// partition key
	PartitionKey string `protobuf:"bytes,2,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	// table name
	TableName string `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// chunk_id
	ChunkId uint32 `protobuf:"varint,3,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
}

func (x *WriteChunk) Reset() {
	*x = WriteChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteChunk) ProtoMessage() {}

func (x *WriteChunk) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteChunk.ProtoReflect.Descriptor instead.
func (*WriteChunk) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_jobs_proto_rawDescGZIP(), []int{3}
}

func (x *WriteChunk) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *WriteChunk) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *WriteChunk) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *WriteChunk) GetChunkId() uint32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

// Compact chunks into a single chunk
type CompactChunks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the database
	DbName string `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	// partition key
	PartitionKey string `protobuf:"bytes,2,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	// table name
	TableName string `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// chunk_id
	Chunks []uint32 `protobuf:"varint,3,rep,packed,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *CompactChunks) Reset() {
	*x = CompactChunks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactChunks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactChunks) ProtoMessage() {}

func (x *CompactChunks) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactChunks.ProtoReflect.Descriptor instead.
func (*CompactChunks) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_jobs_proto_rawDescGZIP(), []int{4}
}

func (x *CompactChunks) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *CompactChunks) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *CompactChunks) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *CompactChunks) GetChunks() []uint32 {
	if x != nil {
		return x.Chunks
	}
	return nil
}

// Split and write chunks to object store
type PersistChunks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the database
	DbName string `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	// partition key
	PartitionKey string `protobuf:"bytes,2,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	// table name
	TableName string `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// chunk_id
	Chunks []uint32 `protobuf:"varint,3,rep,packed,name=chunks,proto3" json:"chunks,omitempty"`
}

func (x *PersistChunks) Reset() {
	*x = PersistChunks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistChunks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistChunks) ProtoMessage() {}

func (x *PersistChunks) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistChunks.ProtoReflect.Descriptor instead.
func (*PersistChunks) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_jobs_proto_rawDescGZIP(), []int{5}
}

func (x *PersistChunks) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *PersistChunks) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *PersistChunks) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *PersistChunks) GetChunks() []uint32 {
	if x != nil {
		return x.Chunks
	}
	return nil
}

// Drop chunk from memory and (if persisted) from object store.
type DropChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the database
	DbName string `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	// partition key
	PartitionKey string `protobuf:"bytes,2,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	// table name
	TableName string `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// chunk_id
	ChunkId uint32 `protobuf:"varint,3,opt,name=chunk_id,json=chunkId,proto3" json:"chunk_id,omitempty"`
}

func (x *DropChunk) Reset() {
	*x = DropChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropChunk) ProtoMessage() {}

func (x *DropChunk) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropChunk.ProtoReflect.Descriptor instead.
func (*DropChunk) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_jobs_proto_rawDescGZIP(), []int{6}
}

func (x *DropChunk) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DropChunk) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *DropChunk) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DropChunk) GetChunkId() uint32 {
	if x != nil {
		return x.ChunkId
	}
	return 0
}

// Drop partition from memory and (if persisted) from object store.
type DropPartition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the database
	DbName string `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	// partition key
	PartitionKey string `protobuf:"bytes,2,opt,name=partition_key,json=partitionKey,proto3" json:"partition_key,omitempty"`
	// table name
	TableName string `protobuf:"bytes,4,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *DropPartition) Reset() {
	*x = DropPartition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropPartition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropPartition) ProtoMessage() {}

func (x *DropPartition) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropPartition.ProtoReflect.Descriptor instead.
func (*DropPartition) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_jobs_proto_rawDescGZIP(), []int{7}
}

func (x *DropPartition) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *DropPartition) GetPartitionKey() string {
	if x != nil {
		return x.PartitionKey
	}
	return ""
}

func (x *DropPartition) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

// Wipe preserved catalog
type WipePreservedCatalog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the database
	DbName string `protobuf:"bytes,1,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
}

func (x *WipePreservedCatalog) Reset() {
	*x = WipePreservedCatalog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WipePreservedCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WipePreservedCatalog) ProtoMessage() {}

func (x *WipePreservedCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_jobs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WipePreservedCatalog.ProtoReflect.Descriptor instead.
func (*WipePreservedCatalog) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_jobs_proto_rawDescGZIP(), []int{8}
}

func (x *WipePreservedCatalog) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

var File_influxdata_iox_management_v1_jobs_proto protoreflect.FileDescriptor

var file_influxdata_iox_management_v1_jobs_proto_rawDesc = []byte{
	0x0a, 0x27, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6f, 0x78,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6a,
	0x6f, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x22, 0xbf, 0x07, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x70, 0x75, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x63, 0x70, 0x75, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61,
	0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x77, 0x61, 0x6c, 0x6c, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x48, 0x00, 0x52, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79,
	0x12, 0x4b, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48,
	0x00, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x4b, 0x0a,
	0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x0a,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x6a, 0x0a, 0x16, 0x77, 0x69,
	0x70, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x69, 0x70, 0x65, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x48, 0x00,
	0x52, 0x14, 0x77, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x54, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x54, 0x0a, 0x0e,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x73, 0x12, 0x48, 0x0a, 0x0a, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x48,
	0x00, 0x52, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x54, 0x0a, 0x0e,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x36, 0x0a, 0x05, 0x44, 0x75, 0x6d,
	0x6d, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x0a, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x49, 0x64, 0x22,
	0x84, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x22, 0x83, 0x01,
	0x0a, 0x09, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x2f, 0x0a, 0x14, 0x57, 0x69, 0x70, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6f, 0x78, 0x2f,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_influxdata_iox_management_v1_jobs_proto_rawDescOnce sync.Once
	file_influxdata_iox_management_v1_jobs_proto_rawDescData = file_influxdata_iox_management_v1_jobs_proto_rawDesc
)

func file_influxdata_iox_management_v1_jobs_proto_rawDescGZIP() []byte {
	file_influxdata_iox_management_v1_jobs_proto_rawDescOnce.Do(func() {
		file_influxdata_iox_management_v1_jobs_proto_rawDescData = protoimpl.X.CompressGZIP(file_influxdata_iox_management_v1_jobs_proto_rawDescData)
	})
	return file_influxdata_iox_management_v1_jobs_proto_rawDescData
}

var file_influxdata_iox_management_v1_jobs_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_influxdata_iox_management_v1_jobs_proto_goTypes = []interface{}{
	(*OperationMetadata)(nil),    // 0: influxdata.iox.management.v1.OperationMetadata
	(*Dummy)(nil),                // 1: influxdata.iox.management.v1.Dummy
	(*CloseChunk)(nil),           // 2: influxdata.iox.management.v1.CloseChunk
	(*WriteChunk)(nil),           // 3: influxdata.iox.management.v1.WriteChunk
	(*CompactChunks)(nil),        // 4: influxdata.iox.management.v1.CompactChunks
	(*PersistChunks)(nil),        // 5: influxdata.iox.management.v1.PersistChunks
	(*DropChunk)(nil),            // 6: influxdata.iox.management.v1.DropChunk
	(*DropPartition)(nil),        // 7: influxdata.iox.management.v1.DropPartition
	(*WipePreservedCatalog)(nil), // 8: influxdata.iox.management.v1.WipePreservedCatalog
}
var file_influxdata_iox_management_v1_jobs_proto_depIdxs = []int32{
	1, // 0: influxdata.iox.management.v1.OperationMetadata.dummy:type_name -> influxdata.iox.management.v1.Dummy
	2, // 1: influxdata.iox.management.v1.OperationMetadata.close_chunk:type_name -> influxdata.iox.management.v1.CloseChunk
	3, // 2: influxdata.iox.management.v1.OperationMetadata.write_chunk:type_name -> influxdata.iox.management.v1.WriteChunk
	8, // 3: influxdata.iox.management.v1.OperationMetadata.wipe_preserved_catalog:type_name -> influxdata.iox.management.v1.WipePreservedCatalog
	4, // 4: influxdata.iox.management.v1.OperationMetadata.compact_chunks:type_name -> influxdata.iox.management.v1.CompactChunks
	5, // 5: influxdata.iox.management.v1.OperationMetadata.persist_chunks:type_name -> influxdata.iox.management.v1.PersistChunks
	6, // 6: influxdata.iox.management.v1.OperationMetadata.drop_chunk:type_name -> influxdata.iox.management.v1.DropChunk
	7, // 7: influxdata.iox.management.v1.OperationMetadata.drop_partition:type_name -> influxdata.iox.management.v1.DropPartition
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_influxdata_iox_management_v1_jobs_proto_init() }
func file_influxdata_iox_management_v1_jobs_proto_init() {
	if File_influxdata_iox_management_v1_jobs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_influxdata_iox_management_v1_jobs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_jobs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dummy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_jobs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloseChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_jobs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_jobs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactChunks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_jobs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistChunks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_jobs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_jobs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropPartition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_jobs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WipePreservedCatalog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_influxdata_iox_management_v1_jobs_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*OperationMetadata_Dummy)(nil),
		(*OperationMetadata_CloseChunk)(nil),
		(*OperationMetadata_WriteChunk)(nil),
		(*OperationMetadata_WipePreservedCatalog)(nil),
		(*OperationMetadata_CompactChunks)(nil),
		(*OperationMetadata_PersistChunks)(nil),
		(*OperationMetadata_DropChunk)(nil),
		(*OperationMetadata_DropPartition)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_influxdata_iox_management_v1_jobs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_influxdata_iox_management_v1_jobs_proto_goTypes,
		DependencyIndexes: file_influxdata_iox_management_v1_jobs_proto_depIdxs,
		MessageInfos:      file_influxdata_iox_management_v1_jobs_proto_msgTypes,
	}.Build()
	File_influxdata_iox_management_v1_jobs_proto = out.File
	file_influxdata_iox_management_v1_jobs_proto_rawDesc = nil
	file_influxdata_iox_management_v1_jobs_proto_goTypes = nil
	file_influxdata_iox_management_v1_jobs_proto_depIdxs = nil
}
