// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: influxdata/iox/management/v1/database_rules.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WriteBufferConnection_Direction int32

const (
	// Unspecified direction, will be treated as an error.
	WriteBufferConnection_DIRECTION_UNSPECIFIED WriteBufferConnection_Direction = 0
	// Writes into the buffer aka "producer".
	WriteBufferConnection_DIRECTION_WRITE WriteBufferConnection_Direction = 1
	// Reads from the buffer aka "consumer".
	WriteBufferConnection_DIRECTION_READ WriteBufferConnection_Direction = 2
)

// Enum value maps for WriteBufferConnection_Direction.
var (
	WriteBufferConnection_Direction_name = map[int32]string{
		0: "DIRECTION_UNSPECIFIED",
		1: "DIRECTION_WRITE",
		2: "DIRECTION_READ",
	}
	WriteBufferConnection_Direction_value = map[string]int32{
		"DIRECTION_UNSPECIFIED": 0,
		"DIRECTION_WRITE":       1,
		"DIRECTION_READ":        2,
	}
)

func (x WriteBufferConnection_Direction) Enum() *WriteBufferConnection_Direction {
	p := new(WriteBufferConnection_Direction)
	*p = x
	return p
}

func (x WriteBufferConnection_Direction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WriteBufferConnection_Direction) Descriptor() protoreflect.EnumDescriptor {
	return file_influxdata_iox_management_v1_database_rules_proto_enumTypes[0].Descriptor()
}

func (WriteBufferConnection_Direction) Type() protoreflect.EnumType {
	return &file_influxdata_iox_management_v1_database_rules_proto_enumTypes[0]
}

func (x WriteBufferConnection_Direction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WriteBufferConnection_Direction.Descriptor instead.
func (WriteBufferConnection_Direction) EnumDescriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_database_rules_proto_rawDescGZIP(), []int{3, 0}
}

// `PartitionTemplate` is used to compute the partition key of each row that
// gets written. It can consist of the table name, a column name and its value,
// a formatted time, or a string column and regex captures of its value. For
// columns that do not appear in the input row, a blank value is output.
//
// The key is constructed in order of the template parts; thus ordering changes
// what partition key is generated.
type PartitionTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parts []*PartitionTemplate_Part `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *PartitionTemplate) Reset() {
	*x = PartitionTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionTemplate) ProtoMessage() {}

func (x *PartitionTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionTemplate.ProtoReflect.Descriptor instead.
func (*PartitionTemplate) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_database_rules_proto_rawDescGZIP(), []int{0}
}

func (x *PartitionTemplate) GetParts() []*PartitionTemplate_Part {
	if x != nil {
		return x.Parts
	}
	return nil
}

type LifecycleRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Once the total amount of buffered data in memory reaches this size start
	// dropping data from memory
	BufferSizeSoft uint64 `protobuf:"varint,4,opt,name=buffer_size_soft,json=bufferSizeSoft,proto3" json:"buffer_size_soft,omitempty"`
	// Once the amount of data in memory reaches this size start
	// rejecting writes
	BufferSizeHard uint64 `protobuf:"varint,5,opt,name=buffer_size_hard,json=bufferSizeHard,proto3" json:"buffer_size_hard,omitempty"`
	// Persists chunks to object storage.
	Persist bool `protobuf:"varint,9,opt,name=persist,proto3" json:"persist,omitempty"`
	// Do not allow writing new data to this database
	Immutable bool `protobuf:"varint,8,opt,name=immutable,proto3" json:"immutable,omitempty"`
	// If the background worker doesn't find any work to do it will
	// sleep for this many milliseconds before looking again
	//
	// If 0, the default backoff is used
	// See server::db::lifecycle::DEFAULT_LIFECYCLE_BACKOFF
	WorkerBackoffMillis uint64 `protobuf:"varint,10,opt,name=worker_backoff_millis,json=workerBackoffMillis,proto3" json:"worker_backoff_millis,omitempty"`
	// After how many transactions should IOx write a new checkpoint?
	//
	// If 0 / absent, this default to 100.
	CatalogTransactionsUntilCheckpoint uint64 `protobuf:"varint,11,opt,name=catalog_transactions_until_checkpoint,json=catalogTransactionsUntilCheckpoint,proto3" json:"catalog_transactions_until_checkpoint,omitempty"`
	// Prune catalog transactions older than the given age.
	//
	// Keeping old transaction can be useful for debugging.
	//
	// Defaults to 1 day.
	CatalogTransactionPruneAge *durationpb.Duration `protobuf:"bytes,19,opt,name=catalog_transaction_prune_age,json=catalogTransactionPruneAge,proto3" json:"catalog_transaction_prune_age,omitempty"`
	/// Once a partition hasn't received a write for this period of time,
	/// it will be compacted and, if set, persisted. Writers will generally
	/// have this amount of time to send late arriving writes or this could
	/// be their clock skew.
	LateArriveWindowSeconds uint32 `protobuf:"varint,12,opt,name=late_arrive_window_seconds,json=lateArriveWindowSeconds,proto3" json:"late_arrive_window_seconds,omitempty"`
	// Maximum number of rows before triggering persistence
	PersistRowThreshold uint64 `protobuf:"varint,13,opt,name=persist_row_threshold,json=persistRowThreshold,proto3" json:"persist_row_threshold,omitempty"`
	// Maximum age of a write before triggering persistence
	PersistAgeThresholdSeconds uint32 `protobuf:"varint,14,opt,name=persist_age_threshold_seconds,json=persistAgeThresholdSeconds,proto3" json:"persist_age_threshold_seconds,omitempty"`
	// Maximum number of rows to buffer in a MUB chunk before compacting it
	MubRowThreshold uint64 `protobuf:"varint,15,opt,name=mub_row_threshold,json=mubRowThreshold,proto3" json:"mub_row_threshold,omitempty"`
	// Types that are assignable to MaxActiveCompactionsCfg:
	//	*LifecycleRules_MaxActiveCompactions
	//	*LifecycleRules_MaxActiveCompactionsCpuFraction
	MaxActiveCompactionsCfg isLifecycleRules_MaxActiveCompactionsCfg `protobuf_oneof:"max_active_compactions_cfg"`
	// Use up to this amount of space in bytes for caching Parquet files.
	// A value of 0 disables Parquet caching
	ParquetCacheLimit uint64 `protobuf:"varint,17,opt,name=parquet_cache_limit,json=parquetCacheLimit,proto3" json:"parquet_cache_limit,omitempty"`
}

func (x *LifecycleRules) Reset() {
	*x = LifecycleRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LifecycleRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleRules) ProtoMessage() {}

func (x *LifecycleRules) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleRules.ProtoReflect.Descriptor instead.
func (*LifecycleRules) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_database_rules_proto_rawDescGZIP(), []int{1}
}

func (x *LifecycleRules) GetBufferSizeSoft() uint64 {
	if x != nil {
		return x.BufferSizeSoft
	}
	return 0
}

func (x *LifecycleRules) GetBufferSizeHard() uint64 {
	if x != nil {
		return x.BufferSizeHard
	}
	return 0
}

func (x *LifecycleRules) GetPersist() bool {
	if x != nil {
		return x.Persist
	}
	return false
}

func (x *LifecycleRules) GetImmutable() bool {
	if x != nil {
		return x.Immutable
	}
	return false
}

func (x *LifecycleRules) GetWorkerBackoffMillis() uint64 {
	if x != nil {
		return x.WorkerBackoffMillis
	}
	return 0
}

func (x *LifecycleRules) GetCatalogTransactionsUntilCheckpoint() uint64 {
	if x != nil {
		return x.CatalogTransactionsUntilCheckpoint
	}
	return 0
}

func (x *LifecycleRules) GetCatalogTransactionPruneAge() *durationpb.Duration {
	if x != nil {
		return x.CatalogTransactionPruneAge
	}
	return nil
}

func (x *LifecycleRules) GetLateArriveWindowSeconds() uint32 {
	if x != nil {
		return x.LateArriveWindowSeconds
	}
	return 0
}

func (x *LifecycleRules) GetPersistRowThreshold() uint64 {
	if x != nil {
		return x.PersistRowThreshold
	}
	return 0
}

func (x *LifecycleRules) GetPersistAgeThresholdSeconds() uint32 {
	if x != nil {
		return x.PersistAgeThresholdSeconds
	}
	return 0
}

func (x *LifecycleRules) GetMubRowThreshold() uint64 {
	if x != nil {
		return x.MubRowThreshold
	}
	return 0
}

func (m *LifecycleRules) GetMaxActiveCompactionsCfg() isLifecycleRules_MaxActiveCompactionsCfg {
	if m != nil {
		return m.MaxActiveCompactionsCfg
	}
	return nil
}

func (x *LifecycleRules) GetMaxActiveCompactions() uint32 {
	if x, ok := x.GetMaxActiveCompactionsCfg().(*LifecycleRules_MaxActiveCompactions); ok {
		return x.MaxActiveCompactions
	}
	return 0
}

func (x *LifecycleRules) GetMaxActiveCompactionsCpuFraction() float32 {
	if x, ok := x.GetMaxActiveCompactionsCfg().(*LifecycleRules_MaxActiveCompactionsCpuFraction); ok {
		return x.MaxActiveCompactionsCpuFraction
	}
	return 0
}

func (x *LifecycleRules) GetParquetCacheLimit() uint64 {
	if x != nil {
		return x.ParquetCacheLimit
	}
	return 0
}

type isLifecycleRules_MaxActiveCompactionsCfg interface {
	isLifecycleRules_MaxActiveCompactionsCfg()
}

type LifecycleRules_MaxActiveCompactions struct {
	// The maximum number of concurrent active compactions that can run.
	MaxActiveCompactions uint32 `protobuf:"varint,16,opt,name=max_active_compactions,json=maxActiveCompactions,proto3,oneof"`
}

type LifecycleRules_MaxActiveCompactionsCpuFraction struct {
	// The maximum number of concurrent active compactions that can run
	// expressed as a fraction of the available cpus (rounded to the next smallest non-zero integer).
	MaxActiveCompactionsCpuFraction float32 `protobuf:"fixed32,18,opt,name=max_active_compactions_cpu_fraction,json=maxActiveCompactionsCpuFraction,proto3,oneof"`
}

func (*LifecycleRules_MaxActiveCompactions) isLifecycleRules_MaxActiveCompactionsCfg() {}

func (*LifecycleRules_MaxActiveCompactionsCpuFraction) isLifecycleRules_MaxActiveCompactionsCfg() {}

type DatabaseRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unencoded name of the database
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Template that generates a partition key for each row inserted into the database
	PartitionTemplate *PartitionTemplate `protobuf:"bytes,2,opt,name=partition_template,json=partitionTemplate,proto3" json:"partition_template,omitempty"`
	// Configures how data flows through the system
	LifecycleRules *LifecycleRules `protobuf:"bytes,3,opt,name=lifecycle_rules,json=lifecycleRules,proto3" json:"lifecycle_rules,omitempty"`
	// Types that are assignable to RoutingRules:
	//	*DatabaseRules_ShardConfig
	//	*DatabaseRules_RoutingConfig
	RoutingRules isDatabaseRules_RoutingRules `protobuf_oneof:"routing_rules"`
	// Duration for which the cleanup loop should sleep on average.
	// Defaults to 500 seconds.
	WorkerCleanupAvgSleep *durationpb.Duration `protobuf:"bytes,10,opt,name=worker_cleanup_avg_sleep,json=workerCleanupAvgSleep,proto3" json:"worker_cleanup_avg_sleep,omitempty"`
	// Optionally, the connection for the write buffer for writing or reading/restoring data.
	WriteBufferConnection *WriteBufferConnection `protobuf:"bytes,13,opt,name=write_buffer_connection,json=writeBufferConnection,proto3" json:"write_buffer_connection,omitempty"`
}

func (x *DatabaseRules) Reset() {
	*x = DatabaseRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseRules) ProtoMessage() {}

func (x *DatabaseRules) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseRules.ProtoReflect.Descriptor instead.
func (*DatabaseRules) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_database_rules_proto_rawDescGZIP(), []int{2}
}

func (x *DatabaseRules) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseRules) GetPartitionTemplate() *PartitionTemplate {
	if x != nil {
		return x.PartitionTemplate
	}
	return nil
}

func (x *DatabaseRules) GetLifecycleRules() *LifecycleRules {
	if x != nil {
		return x.LifecycleRules
	}
	return nil
}

func (m *DatabaseRules) GetRoutingRules() isDatabaseRules_RoutingRules {
	if m != nil {
		return m.RoutingRules
	}
	return nil
}

func (x *DatabaseRules) GetShardConfig() *ShardConfig {
	if x, ok := x.GetRoutingRules().(*DatabaseRules_ShardConfig); ok {
		return x.ShardConfig
	}
	return nil
}

func (x *DatabaseRules) GetRoutingConfig() *RoutingConfig {
	if x, ok := x.GetRoutingRules().(*DatabaseRules_RoutingConfig); ok {
		return x.RoutingConfig
	}
	return nil
}

func (x *DatabaseRules) GetWorkerCleanupAvgSleep() *durationpb.Duration {
	if x != nil {
		return x.WorkerCleanupAvgSleep
	}
	return nil
}

func (x *DatabaseRules) GetWriteBufferConnection() *WriteBufferConnection {
	if x != nil {
		return x.WriteBufferConnection
	}
	return nil
}

type isDatabaseRules_RoutingRules interface {
	isDatabaseRules_RoutingRules()
}

type DatabaseRules_ShardConfig struct {
	// Shard config
	ShardConfig *ShardConfig `protobuf:"bytes,8,opt,name=shard_config,json=shardConfig,proto3,oneof"`
}

type DatabaseRules_RoutingConfig struct {
	// Routing config
	RoutingConfig *RoutingConfig `protobuf:"bytes,9,opt,name=routing_config,json=routingConfig,proto3,oneof"`
}

func (*DatabaseRules_ShardConfig) isDatabaseRules_RoutingRules() {}

func (*DatabaseRules_RoutingConfig) isDatabaseRules_RoutingRules() {}

// Configures the use of a write buffer.
type WriteBufferConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the buffer is used for reading or writing.
	Direction WriteBufferConnection_Direction `protobuf:"varint,1,opt,name=direction,proto3,enum=influxdata.iox.management.v1.WriteBufferConnection_Direction" json:"direction,omitempty"`
	// Which type should be used (e.g. "kafka", "mock")
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// Connection string, depends on `type`.
	Connection string `protobuf:"bytes,3,opt,name=connection,proto3" json:"connection,omitempty"`
	// Special configs to be applied when establishing the connection.
	//
	// This depends on `type` and can configure aspects like timeouts.
	ConnectionConfig map[string]string `protobuf:"bytes,6,rep,name=connection_config,json=connectionConfig,proto3" json:"connection_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Specifies if the sequencers (e.g. for Kafka in form of a topic w/ `n_sequencers` partitions) should be
	// automatically created if they do not existing prior to reading or writing.
	CreationConfig *WriteBufferCreationConfig `protobuf:"bytes,8,opt,name=creation_config,json=creationConfig,proto3" json:"creation_config,omitempty"`
}

func (x *WriteBufferConnection) Reset() {
	*x = WriteBufferConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteBufferConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteBufferConnection) ProtoMessage() {}

func (x *WriteBufferConnection) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteBufferConnection.ProtoReflect.Descriptor instead.
func (*WriteBufferConnection) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_database_rules_proto_rawDescGZIP(), []int{3}
}

func (x *WriteBufferConnection) GetDirection() WriteBufferConnection_Direction {
	if x != nil {
		return x.Direction
	}
	return WriteBufferConnection_DIRECTION_UNSPECIFIED
}

func (x *WriteBufferConnection) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *WriteBufferConnection) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *WriteBufferConnection) GetConnectionConfig() map[string]string {
	if x != nil {
		return x.ConnectionConfig
	}
	return nil
}

func (x *WriteBufferConnection) GetCreationConfig() *WriteBufferCreationConfig {
	if x != nil {
		return x.CreationConfig
	}
	return nil
}

// Configs sequencer auto-creation for write buffers.
//
// What that means depends on the used write buffer, e.g. for Kafka this will create a new topic w/ `n_sequencers`
// partitions.
type WriteBufferCreationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of sequencers.
	//
	// Defaults to 1.
	//
	// How they are implemented depends on `type`, e.g. for Kafka this is mapped to the number of partitions.
	NSequencers uint32 `protobuf:"varint,1,opt,name=n_sequencers,json=nSequencers,proto3" json:"n_sequencers,omitempty"`
	// Special configs to by applied when sequencers are created.
	//
	// This depends on `type` and can setup parameters like retention policy.
	Options map[string]string `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *WriteBufferCreationConfig) Reset() {
	*x = WriteBufferCreationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteBufferCreationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteBufferCreationConfig) ProtoMessage() {}

func (x *WriteBufferCreationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteBufferCreationConfig.ProtoReflect.Descriptor instead.
func (*WriteBufferCreationConfig) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_database_rules_proto_rawDescGZIP(), []int{4}
}

func (x *WriteBufferCreationConfig) GetNSequencers() uint32 {
	if x != nil {
		return x.NSequencers
	}
	return 0
}

func (x *WriteBufferCreationConfig) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type RoutingConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sink *Sink `protobuf:"bytes,2,opt,name=sink,proto3" json:"sink,omitempty"`
}

func (x *RoutingConfig) Reset() {
	*x = RoutingConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingConfig) ProtoMessage() {}

func (x *RoutingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingConfig.ProtoReflect.Descriptor instead.
func (*RoutingConfig) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_database_rules_proto_rawDescGZIP(), []int{5}
}

func (x *RoutingConfig) GetSink() *Sink {
	if x != nil {
		return x.Sink
	}
	return nil
}

type PartitionTemplate_Part struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Part:
	//	*PartitionTemplate_Part_Table
	//	*PartitionTemplate_Part_Column
	//	*PartitionTemplate_Part_Time
	//	*PartitionTemplate_Part_Regex
	//	*PartitionTemplate_Part_StrfTime
	Part isPartitionTemplate_Part_Part `protobuf_oneof:"part"`
}

func (x *PartitionTemplate_Part) Reset() {
	*x = PartitionTemplate_Part{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionTemplate_Part) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionTemplate_Part) ProtoMessage() {}

func (x *PartitionTemplate_Part) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionTemplate_Part.ProtoReflect.Descriptor instead.
func (*PartitionTemplate_Part) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_database_rules_proto_rawDescGZIP(), []int{0, 0}
}

func (m *PartitionTemplate_Part) GetPart() isPartitionTemplate_Part_Part {
	if m != nil {
		return m.Part
	}
	return nil
}

func (x *PartitionTemplate_Part) GetTable() *emptypb.Empty {
	if x, ok := x.GetPart().(*PartitionTemplate_Part_Table); ok {
		return x.Table
	}
	return nil
}

func (x *PartitionTemplate_Part) GetColumn() string {
	if x, ok := x.GetPart().(*PartitionTemplate_Part_Column); ok {
		return x.Column
	}
	return ""
}

func (x *PartitionTemplate_Part) GetTime() string {
	if x, ok := x.GetPart().(*PartitionTemplate_Part_Time); ok {
		return x.Time
	}
	return ""
}

func (x *PartitionTemplate_Part) GetRegex() *PartitionTemplate_Part_ColumnFormat {
	if x, ok := x.GetPart().(*PartitionTemplate_Part_Regex); ok {
		return x.Regex
	}
	return nil
}

func (x *PartitionTemplate_Part) GetStrfTime() *PartitionTemplate_Part_ColumnFormat {
	if x, ok := x.GetPart().(*PartitionTemplate_Part_StrfTime); ok {
		return x.StrfTime
	}
	return nil
}

type isPartitionTemplate_Part_Part interface {
	isPartitionTemplate_Part_Part()
}

type PartitionTemplate_Part_Table struct {
	Table *emptypb.Empty `protobuf:"bytes,1,opt,name=table,proto3,oneof"`
}

type PartitionTemplate_Part_Column struct {
	Column string `protobuf:"bytes,2,opt,name=column,proto3,oneof"`
}

type PartitionTemplate_Part_Time struct {
	Time string `protobuf:"bytes,3,opt,name=time,proto3,oneof"`
}

type PartitionTemplate_Part_Regex struct {
	Regex *PartitionTemplate_Part_ColumnFormat `protobuf:"bytes,4,opt,name=regex,proto3,oneof"`
}

type PartitionTemplate_Part_StrfTime struct {
	StrfTime *PartitionTemplate_Part_ColumnFormat `protobuf:"bytes,5,opt,name=strf_time,json=strfTime,proto3,oneof"`
}

func (*PartitionTemplate_Part_Table) isPartitionTemplate_Part_Part() {}

func (*PartitionTemplate_Part_Column) isPartitionTemplate_Part_Part() {}

func (*PartitionTemplate_Part_Time) isPartitionTemplate_Part_Part() {}

func (*PartitionTemplate_Part_Regex) isPartitionTemplate_Part_Part() {}

func (*PartitionTemplate_Part_StrfTime) isPartitionTemplate_Part_Part() {}

type PartitionTemplate_Part_ColumnFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *PartitionTemplate_Part_ColumnFormat) Reset() {
	*x = PartitionTemplate_Part_ColumnFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionTemplate_Part_ColumnFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionTemplate_Part_ColumnFormat) ProtoMessage() {}

func (x *PartitionTemplate_Part_ColumnFormat) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_database_rules_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionTemplate_Part_ColumnFormat.ProtoReflect.Descriptor instead.
func (*PartitionTemplate_Part_ColumnFormat) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_database_rules_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *PartitionTemplate_Part_ColumnFormat) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *PartitionTemplate_Part_ColumnFormat) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

var File_influxdata_iox_management_v1_database_rules_proto protoreflect.FileDescriptor

var file_influxdata_iox_management_v1_database_rules_proto_rawDesc = []byte{
	0x0a, 0x31, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6f, 0x78,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6f, 0x78, 0x2f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x03, 0x0a, 0x11, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x4a,
	0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x1a, 0xeb, 0x02, 0x0a, 0x04, 0x50,
	0x61, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x14, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x60,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69,
	0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x72, 0x66, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0x3e, 0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x42, 0x06, 0x0a, 0x04, 0x70, 0x61, 0x72, 0x74, 0x22, 0xbd, 0x06, 0x0a, 0x0e, 0x4c, 0x69, 0x66,
	0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x53, 0x6f, 0x66, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x68, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x48, 0x61, 0x72, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6f, 0x66, 0x66, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x6f, 0x66, 0x66, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x51, 0x0a, 0x25, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x22, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55,
	0x6e, 0x74, 0x69, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5c,
	0x0a, 0x1d, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1a, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x41, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x1a,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x17, 0x6c, 0x61, 0x74, 0x65, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x41, 0x0a,
	0x1d, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x1a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x41, 0x67, 0x65,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x75, 0x62, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x75, 0x62,
	0x52, 0x6f, 0x77, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x16,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x14,
	0x6d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a, 0x23, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63,
	0x70, 0x75, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x02, 0x48, 0x00, 0x52, 0x1f, 0x6d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x70, 0x75, 0x46, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x5f,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x11, 0x70, 0x61, 0x72, 0x71, 0x75, 0x65, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x42, 0x1c, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63,
	0x66, 0x67, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xde, 0x04, 0x0a, 0x0d, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5e,
	0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x11, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x55,
	0x0a, 0x0f, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x0e, 0x6c, 0x69, 0x66, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x0a, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x18, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x5f, 0x61, 0x76,
	0x67, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x41, 0x76, 0x67, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12,
	0x6b, 0x0a, 0x17, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f,
	0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x4a, 0x04, 0x08,
	0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x22, 0xaa, 0x04, 0x0a, 0x15, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x49, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x60, 0x0a, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x43,
	0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x15, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xda, 0x01, 0x0a, 0x19, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6e, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x42, 0x29, 0x5a, 0x27,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6f, 0x78, 0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_influxdata_iox_management_v1_database_rules_proto_rawDescOnce sync.Once
	file_influxdata_iox_management_v1_database_rules_proto_rawDescData = file_influxdata_iox_management_v1_database_rules_proto_rawDesc
)

func file_influxdata_iox_management_v1_database_rules_proto_rawDescGZIP() []byte {
	file_influxdata_iox_management_v1_database_rules_proto_rawDescOnce.Do(func() {
		file_influxdata_iox_management_v1_database_rules_proto_rawDescData = protoimpl.X.CompressGZIP(file_influxdata_iox_management_v1_database_rules_proto_rawDescData)
	})
	return file_influxdata_iox_management_v1_database_rules_proto_rawDescData
}

var file_influxdata_iox_management_v1_database_rules_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_influxdata_iox_management_v1_database_rules_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_influxdata_iox_management_v1_database_rules_proto_goTypes = []interface{}{
	(WriteBufferConnection_Direction)(0),        // 0: influxdata.iox.management.v1.WriteBufferConnection.Direction
	(*PartitionTemplate)(nil),                   // 1: influxdata.iox.management.v1.PartitionTemplate
	(*LifecycleRules)(nil),                      // 2: influxdata.iox.management.v1.LifecycleRules
	(*DatabaseRules)(nil),                       // 3: influxdata.iox.management.v1.DatabaseRules
	(*WriteBufferConnection)(nil),               // 4: influxdata.iox.management.v1.WriteBufferConnection
	(*WriteBufferCreationConfig)(nil),           // 5: influxdata.iox.management.v1.WriteBufferCreationConfig
	(*RoutingConfig)(nil),                       // 6: influxdata.iox.management.v1.RoutingConfig
	(*PartitionTemplate_Part)(nil),              // 7: influxdata.iox.management.v1.PartitionTemplate.Part
	(*PartitionTemplate_Part_ColumnFormat)(nil), // 8: influxdata.iox.management.v1.PartitionTemplate.Part.ColumnFormat
	nil,                         // 9: influxdata.iox.management.v1.WriteBufferConnection.ConnectionConfigEntry
	nil,                         // 10: influxdata.iox.management.v1.WriteBufferCreationConfig.OptionsEntry
	(*durationpb.Duration)(nil), // 11: google.protobuf.Duration
	(*ShardConfig)(nil),         // 12: influxdata.iox.management.v1.ShardConfig
	(*Sink)(nil),                // 13: influxdata.iox.management.v1.Sink
	(*emptypb.Empty)(nil),       // 14: google.protobuf.Empty
}
var file_influxdata_iox_management_v1_database_rules_proto_depIdxs = []int32{
	7,  // 0: influxdata.iox.management.v1.PartitionTemplate.parts:type_name -> influxdata.iox.management.v1.PartitionTemplate.Part
	11, // 1: influxdata.iox.management.v1.LifecycleRules.catalog_transaction_prune_age:type_name -> google.protobuf.Duration
	1,  // 2: influxdata.iox.management.v1.DatabaseRules.partition_template:type_name -> influxdata.iox.management.v1.PartitionTemplate
	2,  // 3: influxdata.iox.management.v1.DatabaseRules.lifecycle_rules:type_name -> influxdata.iox.management.v1.LifecycleRules
	12, // 4: influxdata.iox.management.v1.DatabaseRules.shard_config:type_name -> influxdata.iox.management.v1.ShardConfig
	6,  // 5: influxdata.iox.management.v1.DatabaseRules.routing_config:type_name -> influxdata.iox.management.v1.RoutingConfig
	11, // 6: influxdata.iox.management.v1.DatabaseRules.worker_cleanup_avg_sleep:type_name -> google.protobuf.Duration
	4,  // 7: influxdata.iox.management.v1.DatabaseRules.write_buffer_connection:type_name -> influxdata.iox.management.v1.WriteBufferConnection
	0,  // 8: influxdata.iox.management.v1.WriteBufferConnection.direction:type_name -> influxdata.iox.management.v1.WriteBufferConnection.Direction
	9,  // 9: influxdata.iox.management.v1.WriteBufferConnection.connection_config:type_name -> influxdata.iox.management.v1.WriteBufferConnection.ConnectionConfigEntry
	5,  // 10: influxdata.iox.management.v1.WriteBufferConnection.creation_config:type_name -> influxdata.iox.management.v1.WriteBufferCreationConfig
	10, // 11: influxdata.iox.management.v1.WriteBufferCreationConfig.options:type_name -> influxdata.iox.management.v1.WriteBufferCreationConfig.OptionsEntry
	13, // 12: influxdata.iox.management.v1.RoutingConfig.sink:type_name -> influxdata.iox.management.v1.Sink
	14, // 13: influxdata.iox.management.v1.PartitionTemplate.Part.table:type_name -> google.protobuf.Empty
	8,  // 14: influxdata.iox.management.v1.PartitionTemplate.Part.regex:type_name -> influxdata.iox.management.v1.PartitionTemplate.Part.ColumnFormat
	8,  // 15: influxdata.iox.management.v1.PartitionTemplate.Part.strf_time:type_name -> influxdata.iox.management.v1.PartitionTemplate.Part.ColumnFormat
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_influxdata_iox_management_v1_database_rules_proto_init() }
func file_influxdata_iox_management_v1_database_rules_proto_init() {
	if File_influxdata_iox_management_v1_database_rules_proto != nil {
		return
	}
	file_influxdata_iox_management_v1_shard_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_influxdata_iox_management_v1_database_rules_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_database_rules_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LifecycleRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_database_rules_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_database_rules_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteBufferConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_database_rules_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteBufferCreationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_database_rules_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_database_rules_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionTemplate_Part); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_database_rules_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionTemplate_Part_ColumnFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_influxdata_iox_management_v1_database_rules_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*LifecycleRules_MaxActiveCompactions)(nil),
		(*LifecycleRules_MaxActiveCompactionsCpuFraction)(nil),
	}
	file_influxdata_iox_management_v1_database_rules_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*DatabaseRules_ShardConfig)(nil),
		(*DatabaseRules_RoutingConfig)(nil),
	}
	file_influxdata_iox_management_v1_database_rules_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*PartitionTemplate_Part_Table)(nil),
		(*PartitionTemplate_Part_Column)(nil),
		(*PartitionTemplate_Part_Time)(nil),
		(*PartitionTemplate_Part_Regex)(nil),
		(*PartitionTemplate_Part_StrfTime)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_influxdata_iox_management_v1_database_rules_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_influxdata_iox_management_v1_database_rules_proto_goTypes,
		DependencyIndexes: file_influxdata_iox_management_v1_database_rules_proto_depIdxs,
		EnumInfos:         file_influxdata_iox_management_v1_database_rules_proto_enumTypes,
		MessageInfos:      file_influxdata_iox_management_v1_database_rules_proto_msgTypes,
	}.Build()
	File_influxdata_iox_management_v1_database_rules_proto = out.File
	file_influxdata_iox_management_v1_database_rules_proto_rawDesc = nil
	file_influxdata_iox_management_v1_database_rules_proto_goTypes = nil
	file_influxdata_iox_management_v1_database_rules_proto_depIdxs = nil
}
