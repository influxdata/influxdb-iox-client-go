// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: influxdata/iox/management/v1/shard.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// `ShardConfig` defines rules for assigning a line/row to an individual
// host or a group of hosts. A shard
// is a logical concept, but the usage is meant to split data into
// mutually exclusive areas. The rough order of organization is:
// database -> shard -> partition -> chunk. For example, you could shard
// based on table name and assign to 1 of 10 shards. Within each
// shard you would have partitions, which would likely be based off time.
// This makes it possible to horizontally scale out writes.
type ShardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Each matcher, if any, is evaluated in order.
	/// If there is a match, the route will be evaluated to
	/// the given targets, otherwise the hash ring will be evaluated.
	/// This is useful for overriding the hashring function on some hot spot. For
	/// example, if you use the table name as the input to the hash function
	/// and your ring has 4 slots. If two tables that are very hot get
	/// assigned to the same slot you can override that by putting in a
	/// specific matcher to pull that table over to a different node.
	SpecificTargets []*MatcherToShard `protobuf:"bytes,1,rep,name=specific_targets,json=specificTargets,proto3" json:"specific_targets,omitempty"`
	/// An optional default hasher which will route to one in a collection of
	/// nodes.
	HashRing *HashRing `protobuf:"bytes,2,opt,name=hash_ring,json=hashRing,proto3" json:"hash_ring,omitempty"`
	/// If set to true the router will ignore any errors sent by the remote
	/// targets in this route. That is, the write request will succeed
	/// regardless of this route's success.
	IgnoreErrors bool `protobuf:"varint,3,opt,name=ignore_errors,json=ignoreErrors,proto3" json:"ignore_errors,omitempty"`
	/// Mapping between shard IDs and node groups. Other sharding rules use
	/// ShardId as targets.
	Shards map[uint32]*Sink `protobuf:"bytes,4,rep,name=shards,proto3" json:"shards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ShardConfig) Reset() {
	*x = ShardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardConfig) ProtoMessage() {}

func (x *ShardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardConfig.ProtoReflect.Descriptor instead.
func (*ShardConfig) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_shard_proto_rawDescGZIP(), []int{0}
}

func (x *ShardConfig) GetSpecificTargets() []*MatcherToShard {
	if x != nil {
		return x.SpecificTargets
	}
	return nil
}

func (x *ShardConfig) GetHashRing() *HashRing {
	if x != nil {
		return x.HashRing
	}
	return nil
}

func (x *ShardConfig) GetIgnoreErrors() bool {
	if x != nil {
		return x.IgnoreErrors
	}
	return false
}

func (x *ShardConfig) GetShards() map[uint32]*Sink {
	if x != nil {
		return x.Shards
	}
	return nil
}

// Maps a matcher with specific shard. If the line/row matches
// it should be sent to the group.
type MatcherToShard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matcher *Matcher `protobuf:"bytes,1,opt,name=matcher,proto3" json:"matcher,omitempty"`
	Shard   uint32   `protobuf:"varint,2,opt,name=shard,proto3" json:"shard,omitempty"`
}

func (x *MatcherToShard) Reset() {
	*x = MatcherToShard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatcherToShard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatcherToShard) ProtoMessage() {}

func (x *MatcherToShard) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatcherToShard.ProtoReflect.Descriptor instead.
func (*MatcherToShard) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_shard_proto_rawDescGZIP(), []int{1}
}

func (x *MatcherToShard) GetMatcher() *Matcher {
	if x != nil {
		return x.Matcher
	}
	return nil
}

func (x *MatcherToShard) GetShard() uint32 {
	if x != nil {
		return x.Shard
	}
	return 0
}

/// A matcher is used to match routing rules or subscriptions on a row-by-row
/// (or line) basis.
type Matcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if provided, match if the table name matches against the regex
	TableNameRegex string `protobuf:"bytes,1,opt,name=table_name_regex,json=tableNameRegex,proto3" json:"table_name_regex,omitempty"`
	// paul: what should we use for predicate matching here against a single row/line?
	Predicate string `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
}

func (x *Matcher) Reset() {
	*x = Matcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Matcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matcher) ProtoMessage() {}

func (x *Matcher) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matcher.ProtoReflect.Descriptor instead.
func (*Matcher) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_shard_proto_rawDescGZIP(), []int{2}
}

func (x *Matcher) GetTableNameRegex() string {
	if x != nil {
		return x.TableNameRegex
	}
	return ""
}

func (x *Matcher) GetPredicate() string {
	if x != nil {
		return x.Predicate
	}
	return ""
}

// Configuration for a specific sink
type Sink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sink:
	//	*Sink_Iox
	//	*Sink_Kafka
	//	*Sink_DevNull
	Sink isSink_Sink `protobuf_oneof:"sink"`
}

func (x *Sink) Reset() {
	*x = Sink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sink) ProtoMessage() {}

func (x *Sink) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sink.ProtoReflect.Descriptor instead.
func (*Sink) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_shard_proto_rawDescGZIP(), []int{3}
}

func (m *Sink) GetSink() isSink_Sink {
	if m != nil {
		return m.Sink
	}
	return nil
}

func (x *Sink) GetIox() *NodeGroup {
	if x, ok := x.GetSink().(*Sink_Iox); ok {
		return x.Iox
	}
	return nil
}

func (x *Sink) GetKafka() *KafkaProducer {
	if x, ok := x.GetSink().(*Sink_Kafka); ok {
		return x.Kafka
	}
	return nil
}

func (x *Sink) GetDevNull() *DevNull {
	if x, ok := x.GetSink().(*Sink_DevNull); ok {
		return x.DevNull
	}
	return nil
}

type isSink_Sink interface {
	isSink_Sink()
}

type Sink_Iox struct {
	Iox *NodeGroup `protobuf:"bytes,1,opt,name=iox,proto3,oneof"`
}

type Sink_Kafka struct {
	Kafka *KafkaProducer `protobuf:"bytes,2,opt,name=kafka,proto3,oneof"`
}

type Sink_DevNull struct {
	DevNull *DevNull `protobuf:"bytes,3,opt,name=dev_null,json=devNull,proto3,oneof"`
}

func (*Sink_Iox) isSink_Sink() {}

func (*Sink_Kafka) isSink_Sink() {}

func (*Sink_DevNull) isSink_Sink() {}

// A collection of IOx nodes
type NodeGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*NodeGroup_Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *NodeGroup) Reset() {
	*x = NodeGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGroup) ProtoMessage() {}

func (x *NodeGroup) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGroup.ProtoReflect.Descriptor instead.
func (*NodeGroup) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_shard_proto_rawDescGZIP(), []int{4}
}

func (x *NodeGroup) GetNodes() []*NodeGroup_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Kafka producer configuration
type KafkaProducer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KafkaProducer) Reset() {
	*x = KafkaProducer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KafkaProducer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaProducer) ProtoMessage() {}

func (x *KafkaProducer) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaProducer.ProtoReflect.Descriptor instead.
func (*KafkaProducer) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_shard_proto_rawDescGZIP(), []int{5}
}

// Everything sent to /dev/null can eventually be retrieved from /dev/random, given sufficient time.
type DevNull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DevNull) Reset() {
	*x = DevNull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevNull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevNull) ProtoMessage() {}

func (x *DevNull) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevNull.ProtoReflect.Descriptor instead.
func (*DevNull) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_shard_proto_rawDescGZIP(), []int{6}
}

// HashRing is a rule for creating a hash key for a row and mapping that to
// an individual node on a ring.
type HashRing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true the table name will be included in the hash key
	TableName bool `protobuf:"varint,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// include the values of these columns in the hash key
	Columns []string `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// ring of shards.
	Shards []uint32 `protobuf:"varint,3,rep,packed,name=shards,proto3" json:"shards,omitempty"`
}

func (x *HashRing) Reset() {
	*x = HashRing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashRing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashRing) ProtoMessage() {}

func (x *HashRing) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashRing.ProtoReflect.Descriptor instead.
func (*HashRing) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_shard_proto_rawDescGZIP(), []int{7}
}

func (x *HashRing) GetTableName() bool {
	if x != nil {
		return x.TableName
	}
	return false
}

func (x *HashRing) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *HashRing) GetShards() []uint32 {
	if x != nil {
		return x.Shards
	}
	return nil
}

type NodeGroup_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NodeGroup_Node) Reset() {
	*x = NodeGroup_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeGroup_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeGroup_Node) ProtoMessage() {}

func (x *NodeGroup_Node) ProtoReflect() protoreflect.Message {
	mi := &file_influxdata_iox_management_v1_shard_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeGroup_Node.ProtoReflect.Descriptor instead.
func (*NodeGroup_Node) Descriptor() ([]byte, []int) {
	return file_influxdata_iox_management_v1_shard_proto_rawDescGZIP(), []int{4, 0}
}

func (x *NodeGroup_Node) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_influxdata_iox_management_v1_shard_proto protoreflect.FileDescriptor

var file_influxdata_iox_management_v1_shard_proto_rawDesc = []byte{
	0x0a, 0x28, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6f, 0x78,
	0x2f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x69, 0x6e, 0x66, 0x6c,
	0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x22, 0xfe, 0x02, 0x0a, 0x0b, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x12, 0x43, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x68, 0x61,
	0x73, 0x68, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x06, 0x73,
	0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x5d, 0x0a, 0x0b, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x0e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x68, 0x61, 0x72, 0x64, 0x12, 0x3f, 0x0a, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69,
	0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x22, 0x51, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x04, 0x53, 0x69, 0x6e, 0x6b, 0x12, 0x3b,
	0x0a, 0x03, 0x69, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6e,
	0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6f, 0x78, 0x12, 0x43, 0x0a, 0x05, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x48, 0x00, 0x52, 0x05, 0x6b, 0x61, 0x66, 0x6b, 0x61,
	0x12, 0x42, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x76, 0x4e, 0x75, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x4e, 0x75, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x73, 0x69, 0x6e, 0x6b, 0x22, 0x67, 0x0a, 0x09,
	0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x42, 0x0a, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x66, 0x6c, 0x75,
	0x78, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x69, 0x6f, 0x78, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x16, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x22, 0x09, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x4e, 0x75, 0x6c,
	0x6c, 0x22, 0x5b, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x68, 0x52, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73, 0x42, 0x29,
	0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x6e, 0x66,
	0x6c, 0x75, 0x78, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x69, 0x6f, 0x78, 0x2f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_influxdata_iox_management_v1_shard_proto_rawDescOnce sync.Once
	file_influxdata_iox_management_v1_shard_proto_rawDescData = file_influxdata_iox_management_v1_shard_proto_rawDesc
)

func file_influxdata_iox_management_v1_shard_proto_rawDescGZIP() []byte {
	file_influxdata_iox_management_v1_shard_proto_rawDescOnce.Do(func() {
		file_influxdata_iox_management_v1_shard_proto_rawDescData = protoimpl.X.CompressGZIP(file_influxdata_iox_management_v1_shard_proto_rawDescData)
	})
	return file_influxdata_iox_management_v1_shard_proto_rawDescData
}

var file_influxdata_iox_management_v1_shard_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_influxdata_iox_management_v1_shard_proto_goTypes = []interface{}{
	(*ShardConfig)(nil),    // 0: influxdata.iox.management.v1.ShardConfig
	(*MatcherToShard)(nil), // 1: influxdata.iox.management.v1.MatcherToShard
	(*Matcher)(nil),        // 2: influxdata.iox.management.v1.Matcher
	(*Sink)(nil),           // 3: influxdata.iox.management.v1.Sink
	(*NodeGroup)(nil),      // 4: influxdata.iox.management.v1.NodeGroup
	(*KafkaProducer)(nil),  // 5: influxdata.iox.management.v1.KafkaProducer
	(*DevNull)(nil),        // 6: influxdata.iox.management.v1.DevNull
	(*HashRing)(nil),       // 7: influxdata.iox.management.v1.HashRing
	nil,                    // 8: influxdata.iox.management.v1.ShardConfig.ShardsEntry
	(*NodeGroup_Node)(nil), // 9: influxdata.iox.management.v1.NodeGroup.Node
}
var file_influxdata_iox_management_v1_shard_proto_depIdxs = []int32{
	1, // 0: influxdata.iox.management.v1.ShardConfig.specific_targets:type_name -> influxdata.iox.management.v1.MatcherToShard
	7, // 1: influxdata.iox.management.v1.ShardConfig.hash_ring:type_name -> influxdata.iox.management.v1.HashRing
	8, // 2: influxdata.iox.management.v1.ShardConfig.shards:type_name -> influxdata.iox.management.v1.ShardConfig.ShardsEntry
	2, // 3: influxdata.iox.management.v1.MatcherToShard.matcher:type_name -> influxdata.iox.management.v1.Matcher
	4, // 4: influxdata.iox.management.v1.Sink.iox:type_name -> influxdata.iox.management.v1.NodeGroup
	5, // 5: influxdata.iox.management.v1.Sink.kafka:type_name -> influxdata.iox.management.v1.KafkaProducer
	6, // 6: influxdata.iox.management.v1.Sink.dev_null:type_name -> influxdata.iox.management.v1.DevNull
	9, // 7: influxdata.iox.management.v1.NodeGroup.nodes:type_name -> influxdata.iox.management.v1.NodeGroup.Node
	3, // 8: influxdata.iox.management.v1.ShardConfig.ShardsEntry.value:type_name -> influxdata.iox.management.v1.Sink
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_influxdata_iox_management_v1_shard_proto_init() }
func file_influxdata_iox_management_v1_shard_proto_init() {
	if File_influxdata_iox_management_v1_shard_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_influxdata_iox_management_v1_shard_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_shard_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatcherToShard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_shard_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Matcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_shard_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_shard_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_shard_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KafkaProducer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_shard_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevNull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_shard_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashRing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_influxdata_iox_management_v1_shard_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeGroup_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_influxdata_iox_management_v1_shard_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Sink_Iox)(nil),
		(*Sink_Kafka)(nil),
		(*Sink_DevNull)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_influxdata_iox_management_v1_shard_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_influxdata_iox_management_v1_shard_proto_goTypes,
		DependencyIndexes: file_influxdata_iox_management_v1_shard_proto_depIdxs,
		MessageInfos:      file_influxdata_iox_management_v1_shard_proto_msgTypes,
	}.Build()
	File_influxdata_iox_management_v1_shard_proto = out.File
	file_influxdata_iox_management_v1_shard_proto_rawDesc = nil
	file_influxdata_iox_management_v1_shard_proto_goTypes = nil
	file_influxdata_iox_management_v1_shard_proto_depIdxs = nil
}
